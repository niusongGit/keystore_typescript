import * as CryptoJS from 'crypto-js';
import {AesManager} from './cryptos/aes_cbc';
import { AddressInfo } from './wallet';

const Version_5 = 5;

class Keystore {
    saveKeyName: string;
    AddrPre: string;
    Coinbase: number;
    Seed: string;
    CheckHash: string;
    Addrs: AddressInfo[];
    addrMap: Map<string, AddressInfo>;
    Salt: number[]|null;
    Rounds: number;
    Version: number;

    constructor(saveKeyName: string, addrPre: string) {
        this.saveKeyName = saveKeyName;
        this.AddrPre = addrPre;
        this.Coinbase = 0;
        this.Seed = "";
        this.CheckHash = "";
        this.Addrs = [];
        this.addrMap = new Map<string, AddressInfo>();
        this.Salt = null;
        this.Rounds = 0;
        this.Version = 0;
    }

    public Load(): void {
        // Implement the logic to load the keystore from the file
        const keystoreString = localStorage.getItem(this.saveKeyName);
        if (keystoreString) {
            const savedKeystore: Keystore = JSON.parse(keystoreString);
            this.Coinbase = savedKeystore.Coinbase;
            this.Seed = savedKeystore.Seed;
            this.CheckHash = savedKeystore.CheckHash;
            this.Addrs = savedKeystore.Addrs;
            this.addrMap = savedKeystore.addrMap;
            this.Salt = savedKeystore.Salt;
            this.Rounds = savedKeystore.Rounds;
            this.Version = savedKeystore.Version;
        }
    }

    public Save(): void {
        // Implement the logic to save the keystore to the file
        const keystoreString = JSON.stringify(this);
        localStorage.setItem(this.saveKeyName, keystoreString);
    }

    public CreateNewKeystore(password: string): void {

        const pwd = CryptoJS.SHA256(password);
        const seed =  CryptoJS.enc.Hex.stringify(CryptoJS.lib.WordArray.random(16));
        // const pwd = crypto.createHash('sha256').update(password).digest();
        // const seed = randomBytes(16);
        this.NewWallet(seed, pwd);
    }

    private NewWallet(seed: string, pwd: CryptoJS.lib.WordArray): void {
       // const privPassphraseSalt = CryptoJS.lib.WordArray.random(32);
      //  const privPassphraseSalt = randomBytes(32);
        this.Salt = CryptoJS.lib.WordArray.random(32).words;

        let nStartTime = Date.now();
        this.Rounds = 25000;
        AesManager.pbkdf2Key(pwd.words, this.Salt, this.Rounds);
        this.Rounds = Math.floor(2500000 / (Date.now() - nStartTime));
        nStartTime = Date.now();
        AesManager.pbkdf2Key(pwd.words, this.Salt, this.Rounds);
        this.Rounds = Math.floor(
            (this.Rounds + (this.Rounds * 100) / (Date.now() - nStartTime)) / 2
        );
        if (this.Rounds < 25000) {
            this.Rounds = 25000;
        }
        const pbkdf2Key = AesManager.pbkdf2Key(pwd.words, this.Salt, this.Rounds);
        //console.log("pbkdf2Key.words : ",pbkdf2Key.words)
       // console.log("pbkdf2Key.words Uint8Array: ",Uint8Array.from(pbkdf2Key.words))


        this.Seed = AesManager.encrypt(seed, pbkdf2Key);
        if (this.Seed === null) {
            throw new Error('Failed to encrypt seed');
        }

        this.CheckHash = CryptoJS.SHA256(seed).toString();
        this.Version = Version_5;
    }

    // Implement other methods based on your Go code
}

export default Keystore;