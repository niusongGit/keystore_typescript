import * as crypto from 'crypto';
import { randomBytes } from 'crypto';
//import {AesManager} from './cryptos/aes_cbc';
import { Pbkdf2Key, EncryptCBCPbkdf2Key, DecryptCBCPbkdf2Key } from './cryptos/aes_cbc';
import { AddressInfo } from './wallet';
import { B58String, AddressFromB58String, AddressCoin } from "@/assets/keystore/cryptos/address";
import { KeyManager } from '@/assets/keystore/derivation/derivation';
import { Buffer } from "buffer";
import * as bip39 from 'bip39';
const Version_5 = 5;
class Keystore {
    saveKeyName: string;
    AddrPre: string;
    Coinbase: number;
    Seed: Uint8Array;
    CheckHash: Uint8Array;
    Addrs: AddressInfo[];
    addrMap: Map<string, AddressInfo>;
    Salt: Uint8Array;
    Rounds: number;
    Version: number;
    constructor(saveKeyName: string, addrPre: string) {
        this.saveKeyName = saveKeyName;
        this.AddrPre = addrPre;
        this.Coinbase = 0;
        this.Seed = new Uint8Array(0);
        this.CheckHash = new Uint8Array(0);
        this.Addrs = [];
        this.addrMap = new Map<string, AddressInfo>();
        this.Salt = new Uint8Array(0);
        this.Rounds = 0;
        this.Version = 0;
    }
    public Load(): void {
        // Implement the logic to load the keystore from the file
        const keystoreString = localStorage.getItem(this.saveKeyName);
        if (keystoreString) {
            const savedKeystore: Keystore = JSON.parse(keystoreString);
            this.Coinbase = savedKeystore.Coinbase;
            this.Seed = savedKeystore.Seed;
            this.CheckHash = savedKeystore.CheckHash;
            this.Addrs = savedKeystore.Addrs;
            this.addrMap = savedKeystore.addrMap;
            this.Salt = savedKeystore.Salt;
            this.Rounds = savedKeystore.Rounds;
            this.Version = savedKeystore.Version;
        }
    }
    public Save(): void {
        // Implement the logic to save the keystore to the file
        const keystoreString = JSON.stringify(this);
        console.log("keystoreString",keystoreString)
        localStorage.setItem(this.saveKeyName, keystoreString);
    }
    public CreateNewKeystore(password: string): void {
        const pwd = crypto.createHash('sha256').update(password).digest();
        const seed = randomBytes(16);
        this.NewWallet(seed, pwd);
    }
    private NewWallet(seed: Uint8Array, pwd: Uint8Array): void {
        this.Salt = randomBytes(32);
        let nStartTime = Date.now();
        this.Rounds = 25000;
        Pbkdf2Key(pwd, this.Salt, this.Rounds);
        this.Rounds = Math.floor(2500000 / (Date.now() - nStartTime));
        nStartTime = Date.now();
        Pbkdf2Key(pwd, this.Salt, this.Rounds);
        this.Rounds = Math.floor(
            (this.Rounds + (this.Rounds * 100) / (Date.now() - nStartTime)) / 2
        );
        if (this.Rounds < 25000) {
            this.Rounds = 25000;
        }
        const pbkdf2Key = Pbkdf2Key(pwd, this.Salt, this.Rounds);
        this.Seed = EncryptCBCPbkdf2Key(seed, pbkdf2Key);
        if (this.Seed === null) {
            throw new Error('Failed to encrypt seed');
        }
        this.CheckHash = crypto.createHash("sha256").update(seed).digest();
        this.Version = Version_5;
    }
    GetNewAddr(walletPassword: string, newAddrPassword: string): AddressCoin {
        const walletPasswordHash = crypto.createHash("sha256").update(walletPassword).digest();
        const newAddrPasswordHash = crypto.createHash("sha256").update(newAddrPassword).digest();
        const [ok, walletPbkdf2Key] = this.Decrypt(walletPasswordHash)
        if (!ok) {
            throw new Error(`wallet password fail !!`);
        }
        let index = 0;
        if (this.Addrs.length > 0) {
            const lastIndex = this.Addrs[this.Addrs.length - 1].index;
            index = lastIndex + 1;
        }
        const seed = DecryptCBCPbkdf2Key(this.Seed, walletPbkdf2Key);
        bip39.setDefaultWordlist("english");
        const words = bip39.entropyToMnemonic(Buffer.from(seed));
        const keyM = new KeyManager(words);
        const key = keyM.GetKey(index);
        const addr = keyM.CreateAddr(this.AddrPre);
        const pbkdf2Key = Pbkdf2Key(newAddrPasswordHash, this.Salt, this.Rounds);
        const prk = EncryptCBCPbkdf2Key(Buffer.from(key.secretKey), pbkdf2Key);
        const puk = EncryptCBCPbkdf2Key(Buffer.from(key.publicKey), pbkdf2Key);
        const addrinfo = new AddressInfo({
            index: index,
            nickname: "",
            addr: addr,
            cPuk: puk,
            subKey: prk,
            addrStr: B58String(addr),
            checkHash: crypto.createHash('sha256').update(key.secretKey).digest()
        });
        this.Addrs.push(addrinfo);
        this.addrMap.set(addrinfo.addrStr, addrinfo);
        console.log("this.addrMap :", this.addrMap);
        this.Save();
        return addr;
    }
    Decrypt(pwd: Uint8Array): [boolean, Uint8Array] {
        const pbkdf2Key = Pbkdf2Key(pwd, this.Salt, this.Rounds);
        const seed = DecryptCBCPbkdf2Key(this.Seed, pbkdf2Key);
        if (seed.length === 0) {
            return [false, pbkdf2Key];
        }
        const chackHash = crypto.createHash("sha256").update(seed).digest();
        if (Buffer.compare(this.CheckHash, chackHash) !== 0) {
            return [false, pbkdf2Key];
        }
        return [true, pbkdf2Key];
    }
    // Implement other methods based on your Go code
}
export default Keystore;