// //import * as crypto from 'crypto';
// import * as CryptoJS from 'crypto-js';
// //import { randomBytes } from 'crypto';
// import {Pbkdf2Key, EncryptCBCPbkdf2Key, wordArrayToUint8Array} from './cryptos/aes_cbc';
// import { AddressInfo } from './wallet';
// //import {WordArray} from "crypto-js";
//
// const Version_5 = 5;
//
// class Keystore {
//     saveKeyName: string;
//     AddrPre: string;
//     Coinbase: number;
//     Seed: Uint8Array;
//     CheckHash: Uint8Array;
//     Addrs: AddressInfo[];
//     addrMap: Map<string, AddressInfo>;
//     Salt: Uint8Array;
//     Rounds: number;
//     Version: number;
//
//     constructor(saveKeyName: string, addrPre: string) {
//         this.saveKeyName = saveKeyName;
//         this.AddrPre = addrPre;
//         this.Coinbase = 0;
//         this.Seed = new Uint8Array(0);
//         this.CheckHash = new Uint8Array(0);
//         this.Addrs = [];
//         this.addrMap = new Map<string, AddressInfo>();
//         this.Salt = new Uint8Array(32);
//         this.Rounds = 0;
//         this.Version = 0;
//     }
//
//     public Load(): void {
//         // Implement the logic to load the keystore from the file
//         const keystoreString = localStorage.getItem(this.saveKeyName);
//         if (keystoreString) {
//             const savedKeystore: Keystore = JSON.parse(keystoreString);
//             this.Coinbase = savedKeystore.Coinbase;
//             this.Seed = Uint8Array.from(savedKeystore.Seed);
//             this.CheckHash = Uint8Array.from(savedKeystore.CheckHash);
//             this.Addrs = savedKeystore.Addrs;
//             this.addrMap = savedKeystore.addrMap;
//             this.Salt = Uint8Array.from(savedKeystore.Salt);
//             this.Rounds = savedKeystore.Rounds;
//             this.Version = savedKeystore.Version;
//         }
//     }
//
//     public Save(): void {
//         // Implement the logic to save the keystore to the file
//         const keystoreString = JSON.stringify(this);
//         localStorage.setItem(this.saveKeyName, keystoreString);
//     }
//
//     public CreateNewKeystore(password: string): void {
//
//         const pwd = CryptoJS.SHA256(password);
//         const seed =  CryptoJS.lib.WordArray.random(16);
//         // const pwd = crypto.createHash('sha256').update(password).digest();
//         // const seed = randomBytes(16);
//         this.NewWallet(seed, pwd);
//     }
//
//     private NewWallet(seed: CryptoJS.lib.WordArray, pwd: CryptoJS.lib.WordArray): void {
//        // const privPassphraseSalt = CryptoJS.lib.WordArray.random(32);
//       //  const privPassphraseSalt = randomBytes(32);
//         const privPassphraseSalt = CryptoJS.lib.WordArray.random(32);
//         this.Salt = wordArrayToUint8Array(privPassphraseSalt);
//         let nStartTime = Date.now();
//         this.Rounds = 25000;
//         Pbkdf2Key(pwd, privPassphraseSalt, this.Rounds);
//         this.Rounds = Math.floor(2500000 / (Date.now() - nStartTime));
//         nStartTime = Date.now();
//         Pbkdf2Key(pwd, privPassphraseSalt, this.Rounds);
//         this.Rounds = Math.floor(
//             (this.Rounds + (this.Rounds * 100) / (Date.now() - nStartTime)) / 2
//         );
//         if (this.Rounds < 25000) {
//             this.Rounds = 25000;
//         }
//         const pbkdf2Key = Pbkdf2Key(pwd, privPassphraseSalt, this.Rounds);
//         //console.log("pbkdf2Key.words : ",pbkdf2Key.words)
//        // console.log("pbkdf2Key.words Uint8Array: ",Uint8Array.from(pbkdf2Key.words))
//
//
//         const seedSec = EncryptCBCPbkdf2Key(wordArrayToUint8Array(seed), Uint8Array.from(pbkdf2Key.words));
//         if (seedSec === null) {
//             throw new Error('Failed to encrypt seed');
//         }
//         //const checkHash = crypto.createHash('sha256').update(seed).digest();
//         const checkHash = wordArrayToUint8Array(CryptoJS.SHA256(seed));
//         this.Seed = new Uint8Array(seedSec);
//         this.CheckHash = new Uint8Array(checkHash);
//         this.Version = Version_5;
//     }
//
//     // Implement other methods based on your Go code
// }
//
// export default Keystore;