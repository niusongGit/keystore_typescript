// source: txbase.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.TxBase', null, global);
goog.exportSymbol('proto.Vin', null, global);
goog.exportSymbol('proto.Vout', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TxBase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TxBase.repeatedFields_, null);
};
goog.inherits(proto.TxBase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TxBase.displayName = 'proto.TxBase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Vin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Vin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Vin.displayName = 'proto.Vin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Vout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Vout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Vout.displayName = 'proto.Vout';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TxBase.repeatedFields_ = [4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TxBase.prototype.toObject = function(opt_includeInstance) {
  return proto.TxBase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TxBase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TxBase.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    vinTotal: jspb.Message.getFieldWithDefault(msg, 3, 0),
    vinList: jspb.Message.toObjectList(msg.getVinList(),
    proto.Vin.toObject, includeInstance),
    voutTotal: jspb.Message.getFieldWithDefault(msg, 5, 0),
    voutList: jspb.Message.toObjectList(msg.getVoutList(),
    proto.Vout.toObject, includeInstance),
    gas: jspb.Message.getFieldWithDefault(msg, 7, 0),
    lockheight: jspb.Message.getFieldWithDefault(msg, 8, 0),
    payload: msg.getPayload_asB64(),
    blockhash: msg.getBlockhash_asB64(),
    gasused: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TxBase}
 */
proto.TxBase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TxBase;
  return proto.TxBase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TxBase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TxBase}
 */
proto.TxBase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVinTotal(value);
      break;
    case 4:
      var value = new proto.Vin;
      reader.readMessage(value,proto.Vin.deserializeBinaryFromReader);
      msg.addVin(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVoutTotal(value);
      break;
    case 6:
      var value = new proto.Vout;
      reader.readMessage(value,proto.Vout.deserializeBinaryFromReader);
      msg.addVout(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLockheight(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasused(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TxBase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TxBase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TxBase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TxBase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getVinTotal();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getVinList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Vin.serializeBinaryToWriter
    );
  }
  f = message.getVoutTotal();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getVoutList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Vout.serializeBinaryToWriter
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getLockheight();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getGasused();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional bytes Hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.TxBase.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.TxBase.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes Hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.TxBase.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.TxBase} returns this
 */
proto.TxBase.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 Type = 2;
 * @return {number}
 */
proto.TxBase.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.TxBase} returns this
 */
proto.TxBase.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 Vin_total = 3;
 * @return {number}
 */
proto.TxBase.prototype.getVinTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.TxBase} returns this
 */
proto.TxBase.prototype.setVinTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Vin Vin = 4;
 * @return {!Array<!proto.Vin>}
 */
proto.TxBase.prototype.getVinList = function() {
  return /** @type{!Array<!proto.Vin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Vin, 4));
};


/**
 * @param {!Array<!proto.Vin>} value
 * @return {!proto.TxBase} returns this
*/
proto.TxBase.prototype.setVinList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Vin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Vin}
 */
proto.TxBase.prototype.addVin = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Vin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TxBase} returns this
 */
proto.TxBase.prototype.clearVinList = function() {
  return this.setVinList([]);
};


/**
 * optional uint64 Vout_total = 5;
 * @return {number}
 */
proto.TxBase.prototype.getVoutTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.TxBase} returns this
 */
proto.TxBase.prototype.setVoutTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Vout Vout = 6;
 * @return {!Array<!proto.Vout>}
 */
proto.TxBase.prototype.getVoutList = function() {
  return /** @type{!Array<!proto.Vout>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Vout, 6));
};


/**
 * @param {!Array<!proto.Vout>} value
 * @return {!proto.TxBase} returns this
*/
proto.TxBase.prototype.setVoutList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Vout=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Vout}
 */
proto.TxBase.prototype.addVout = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Vout, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TxBase} returns this
 */
proto.TxBase.prototype.clearVoutList = function() {
  return this.setVoutList([]);
};


/**
 * optional uint64 Gas = 7;
 * @return {number}
 */
proto.TxBase.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.TxBase} returns this
 */
proto.TxBase.prototype.setGas = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 LockHeight = 8;
 * @return {number}
 */
proto.TxBase.prototype.getLockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.TxBase} returns this
 */
proto.TxBase.prototype.setLockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes Payload = 9;
 * @return {!(string|Uint8Array)}
 */
proto.TxBase.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes Payload = 9;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.TxBase.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes Payload = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.TxBase.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.TxBase} returns this
 */
proto.TxBase.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes BlockHash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.TxBase.prototype.getBlockhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes BlockHash = 10;
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {string}
 */
proto.TxBase.prototype.getBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockhash()));
};


/**
 * optional bytes BlockHash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {!Uint8Array}
 */
proto.TxBase.prototype.getBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.TxBase} returns this
 */
proto.TxBase.prototype.setBlockhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional uint64 GasUsed = 11;
 * @return {number}
 */
proto.TxBase.prototype.getGasused = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.TxBase} returns this
 */
proto.TxBase.prototype.setGasused = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Vin.prototype.toObject = function(opt_includeInstance) {
  return proto.Vin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Vin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vin.toObject = function(includeInstance, msg) {
  var f, obj = {
    puk: msg.getPuk_asB64(),
    sign: msg.getSign_asB64(),
    nonce: msg.getNonce_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Vin}
 */
proto.Vin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Vin;
  return proto.Vin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Vin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Vin}
 */
proto.Vin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPuk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSign(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Vin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Vin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Vin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPuk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSign_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes Puk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Vin.prototype.getPuk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Puk = 1;
 * This is a type-conversion wrapper around `getPuk()`
 * @return {string}
 */
proto.Vin.prototype.getPuk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPuk()));
};


/**
 * optional bytes Puk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPuk()`
 * @return {!Uint8Array}
 */
proto.Vin.prototype.getPuk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPuk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Vin} returns this
 */
proto.Vin.prototype.setPuk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sign = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Vin.prototype.getSign = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sign = 2;
 * This is a type-conversion wrapper around `getSign()`
 * @return {string}
 */
proto.Vin.prototype.getSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSign()));
};


/**
 * optional bytes sign = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSign()`
 * @return {!Uint8Array}
 */
proto.Vin.prototype.getSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSign()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Vin} returns this
 */
proto.Vin.prototype.setSign = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes Nonce = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Vin.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes Nonce = 3;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.Vin.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes Nonce = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.Vin.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Vin} returns this
 */
proto.Vin.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Vout.prototype.toObject = function(opt_includeInstance) {
  return proto.Vout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Vout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vout.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    address: msg.getAddress_asB64(),
    frozenheight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    domain: msg.getDomain_asB64(),
    domaintype: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Vout}
 */
proto.Vout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Vout;
  return proto.Vout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Vout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Vout}
 */
proto.Vout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrozenheight(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDomain(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDomaintype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Vout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Vout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Vout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getFrozenheight();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDomain_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getDomaintype();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 Value = 1;
 * @return {number}
 */
proto.Vout.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Vout} returns this
 */
proto.Vout.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes Address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Vout.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Address = 2;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.Vout.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.Vout.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Vout} returns this
 */
proto.Vout.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 FrozenHeight = 3;
 * @return {number}
 */
proto.Vout.prototype.getFrozenheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Vout} returns this
 */
proto.Vout.prototype.setFrozenheight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes Domain = 4;
 * @return {!(string|Uint8Array)}
 */
proto.Vout.prototype.getDomain = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes Domain = 4;
 * This is a type-conversion wrapper around `getDomain()`
 * @return {string}
 */
proto.Vout.prototype.getDomain_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDomain()));
};


/**
 * optional bytes Domain = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDomain()`
 * @return {!Uint8Array}
 */
proto.Vout.prototype.getDomain_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDomain()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Vout} returns this
 */
proto.Vout.prototype.setDomain = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 DomainType = 5;
 * @return {number}
 */
proto.Vout.prototype.getDomaintype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Vout} returns this
 */
proto.Vout.prototype.setDomaintype = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto);
